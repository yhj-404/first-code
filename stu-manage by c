#include "stdio.h"    /*标准输入输出函数库*/
#include "stdlib.h"   /*标准函数库*/
#include "string.h"   /*字符串函数库*/
#define H1 " ----------------------------学生成绩管理系统--------------------- \n"
#define H2 " |  学号     |      名字     |C语言|数学|英语 | 语文| 总分|平均分|名次| \n"
#define H3 " |----------|---------------|----|----|----|----|----|----|----|\n "
#define FT  "|%-10s|%-15s|%4d|%4d|%4d|%4d|%4d|%4.1f|%4d|\n"
#define DATA  p->data.num,p->data.name,p->data.cgrade,p->data.mgrade,p->data.egrade,p->data.yuw,p->data.total,p->data.ave,p->data.mingci
#define ED     " ----------------------------------------------------------------\n"

int saveflag=0;  /*是否需要存盘的标志变量*/

typedef struct student      /*标记为student*/
{
    char num[10];    /*学号*/
    char name[15];   /*姓名*/
    int cgrade;       /*C语言成绩*/
    int mgrade;      /*数学成绩*/
    int egrade;       /*英语成绩*/
    int yuw;        /*语文成绩*/
    int total;        /*总分*/
    float ave;       /*平均分*/
    int mingci;      /*名次*/
    int clas;        /*班级*/
}student;

/*定义每条记录或结点的数据结构，标记为：node*/
typedef struct node
{
    struct student data;  /*数据域*/
    struct node *next;    /*指针域*/
}Node,*Link;   /*Node为node类型的结构变量，*Link为node类型的指针变量*/


//菜单函数
void menu()
{
    printf("\n************************************************\n");
    printf("*                学生成绩管理系统                  *\n");
    printf("*  本程序的功能包括：                               *\n");
    printf("*  1-输入成绩                                     *\n");
    printf("*  2-删除成绩                                     *\n");
    printf("*  3-查找成绩                                     *\n");
    printf("*  4-修改成绩                                     *\n");
    printf("*  5-插入成绩                                     *\n");
    printf("*  6-计算总成绩                                   *\n");
    printf("*  7-成绩                                        *\n");
    printf("*  0-退出                                        *\n");
    printf("*************************************************\n");
}

void printheader() /*格式化输出表头*/
{
    printf(H1);
    printf(H2);
    printf(H3);
}

void printdata(Node *pp) /*格式化输出表中数据*/
{
    Node* p;
    p=pp;
    printf(FT,DATA);
}

void Wrong()  /*输出按键错误信息*/
{
    printf("\n\n\n\n\n********对不起，输入错误，请按任意键重新输入*********\n");
    getchar();
}

void Nofind()  /*输出未查找此学生的信息*/
{
    printf("\n=====>没有找到此学生\n");
}

void Disp(Link l)  /*显示单链表l中存储的学生记录，内容为student结构中定义的内容*/
{
    Node *p;
    p=l->next; /*l存储的是单链表中头结点的指针，该头结点没有存储学生信息，指针域指向的后继结点才有学生信息*/
    if(!p)  /*p==NULL,NUll在stdlib中定义为0*/
    {
        printf("\n=====>无学生成绩\n");
        getchar();
        return;
    }
    printf("\n\n");
    printheader(); /*输出表格头部*/
    while(p)    /*逐条输出链表中存储的学生信息*/
    {
        printdata(p);
        p=p->next;  /*移动至下一个结点*/
        printf(H3);
    }
    getchar();
}

/*作用：用于定位链表中符合要求的节点，并返回指向该节点的指针参数：findmess[]保存要查找的具体内容; nameornum[]保存按什么查找;在单链表l中查找;*/
Node* Locate(Link l,char findmess[],char nameornum[])
{
    Node *r;
    if(strcmp(nameornum,"num")==0) /*按学号查询*/
    {
        r=l->next;
        while(r)
        {
            if(strcmp(r->data.num,findmess)==0) /*若找到findmess值的学号*/
                return r;
            r=r->next;
        }
    }
    else if(strcmp(nameornum,"name")==0)  /*按姓名查询*/
    {
        r=l->next;
        while(r)
        {
            if(strcmp(r->data.name,findmess)==0)    /*若找到findmess值的学生姓名*/
                return r;
            r=r->next;
        }
    }
    return 0; /*若未找到，返回一个空指针*/
}

/*输入字符串，并进行长度验证(长度<lens)*/
void stringinput(char *t,int lens,char *notice)
{
    char n[255];
    do{
        puts(notice);  /*显示提示信息*/
        scanf("%s",n);  /*输入字符串*/
        if(strlen(n)>lens)
            printf("\n 超过长度，请重新输入! \n"); /*进行长度校验，超过lens值重新输入*/
    }while(strlen(n)>lens);
    strcpy(t,n); /*将输入的字符串拷贝到字符串t中*/
}

/*输入分数，0<＝分数<＝100)*/
int numberinput(char *notice)
{
    int t=0;
    do{
        puts(notice);  /*显示提示信息*/
        scanf("%d",&t);  /*输入分数*/
        if(t>100 || t<0) printf("\n 分数必须在[0,100]! \n"); /*进行分数校验*/
    }while(t>100 || t<0);
    return t;
}

/*增加学生记录*/
void Add(Link l)
{
    Node *p,*r,*s;  /*实现添加操作的临时的结构体指针变量*/
    char ch,flag=0,num[10];
    r=l;
    s=l->next;
    Disp(l); /*先打印出已有的学生信息*/
    while(r->next!=NULL)
        r=r->next; /*将指针移至于链表最末尾，准备添加记录*/
    while(1) /*一次可输入多条记录，直至输入学号为0的记录结点添加操作*/
    {
        while(1) /*输入学号，保证该学号没有被使用，若输入学号为0，则退出添加记录操作*/
        {
            stringinput(num,10,"\n输入学号(按‘0’返回菜单):"); /*格式化输入学号并检验*/
            flag=0;
            if(strcmp(num,"0")==0) /*输入为0，则退出添加操作，返回主界面*/
            {return;}
            s=l->next;
            while(s) /*查询该学号是否已经存在，若存在则要求重新输入一个未被占用的学号*/
            {
                if(strcmp(s->data.num,num)==0)
                {
                    flag=1;
                    break;
                }
                s=s->next;
            }
            if(flag==1) /*提示用户是否重新输入*/
            {
                getchar();
                printf("=====> %s 不存在，请重试?(y/n):",num);
                scanf("%c",&ch);
                if(ch=='y'||ch=='Y')
                    continue;
                else
                    return;
            }
            else
            {break;}
        }
        p=(Node *)malloc(sizeof(Node)); /*申请内存空间*/
        if(!p)
        {
            printf("\n 申请失败 "); /*如没有申请到，打印提示信息*/
            return ;             /*返回主界面*/
        }
        strcpy(p->data.num,num); /*将字符串num拷贝到p->data.num中*/
        stringinput(p->data.name,15,"名字:");
        p->data.cgrade=numberinput("C语言 成绩[0-100]:"); /*输入并检验分数，分数必须在0－100之间*/
        p->data.mgrade=numberinput("数学 成绩[0-100]:");   /*输入并检验分数，分数必须在0－100之间*/
        p->data.egrade=numberinput("英语 成绩[0-100]:"); /*输入并检验分数，分数必须在0－100之间*/
        p->data.yuw=numberinput("语文 成绩[0-100]:");    /*输入并检验分数，分数必须在0-100之间*/
        p->data.total=p->data.egrade+p->data.cgrade+p->data.mgrade+p->data.yuw; /*计算总分*/
        p->data.ave=(float)(p->data.total/4);  /*计算平均分*/
        p->data.mingci=0;
        p->next=NULL; /*表明这是链表的尾部结点*/
        r->next=p;  /*将新建的结点加入链表尾部中*/
        r=p;
        saveflag=1;
    }
    return ;
}


void Qur(Link l) /*按学号或姓名，查询学生记录*/
{
    int select; /*1:按学号查，2：按姓名查，其他：返回主界面（菜单）*/
    char searchinput[20]; /*保存用户输入的查询内容*/
    Node *p;
    if(!l->next) /*若链表为空*/
    {
        printf("\n=====>没有学生成绩!\n");
        getchar();
        return;
    }
    printf("\n     =====>1通过学号查找  =====>2 通过姓名查找\n");
    printf("      请选择[1,2]:");
    scanf("%d",&select);
    if(select==1)   /*按学号查询*/
    {
        stringinput(searchinput,10,"输入已有学生的学号:");
        p=Locate(l,searchinput,"num");/*在l中查找学号为searchinput值的节点，并返回节点的指针*/
        if(p) /*若p!=NULL*/
        {
            printheader();
            printdata(p);
            printf(ED);
            printf("按任意键返回");
            getchar();
        }
        else
            Nofind();
        getchar();
    }
    else if(select==2) /*按姓名查询*/
    {
        stringinput(searchinput,15,"输入已有学生的姓名:");
        p=Locate(l,searchinput,"name");
        if(p)
        {
            printheader();
            printdata(p);
            printf(ED);
            printf("按任意键返回");
            getchar();
        }
        else
            Nofind();
        getchar();
    }
    else
        Wrong();
    getchar();
}

/*删除学生记录：先找到保存该学生记录的节点，然后删除该节点*/
void Del(Link l)
{
    int sel;
    Node *p,*r;
    char findmess[20];
    if(!l->next)
    {
        printf("\n=====>无学生成绩!\n");
        getchar();
        return;
    }
    Disp(l);
    printf("\n        =====>1 通过学号删除       =====>2 通过姓名删除\n");
    printf("       请选择[1,2]:");
    scanf("%d",&sel);
    if(sel==1)
    {
        stringinput(findmess,10,"输入已有学生学号:");
        p=Locate(l,findmess,"num");
        if(p)  /*p!=NULL*/
        {
            r=l;
            while(r->next!=p)
                r=r->next;
            r->next=p->next;/*将p所指节点从链表中去除*/
            free(p); /*释放内存空间*/
            printf("\n=====>删除成功!\n");
            getchar();
            saveflag=1;
        }
        else
            Nofind();
        getchar();
    }
    else if(sel==2) /*先按姓名查询到该记录所在的节点*/
    {
        stringinput(findmess,15,"i输入已有学生姓名：");
        p=Locate(l,findmess,"name");
        if(p)
        {
            r=l;
            while(r->next!=p)
                r=r->next;
            r->next=p->next;
            free(p);
            printf("\n=====>删除成功!\n");
            getchar();
            saveflag=1;
        }
        else
            Nofind();
        getchar();
    }
    else
        Wrong();
    getchar();
}

/*修改学生记录。先按输入的学号查询到该记录，学号不能修改*/
void Modify(Link l)
{
    Node *p;
    char findmess[20];
    if(!l->next)
    {
        printf("\n=====>无学生成绩!\n");
        getchar();
        return;
    }
    printf("修改学生成绩");
    Disp(l);
    stringinput(findmess,10,"输入已有学生学号:"); /*输入并检验该学号*/
    p=Locate(l,findmess,"num"); /*查询到该节点*/
    if(p) /*若p!=NULL,表明已经找到该节点*/
    {
        printf("学号:%s,\n",p->data.num);
        printf("姓名:%s,",p->data.name);
        stringinput(p->data.name,15,"输入新名字:");
        printf("C语言 成绩:%d,",p->data.cgrade);
        p->data.cgrade=numberinput("C语言 成绩[0-100]:");
        printf("数学 成绩:%d,",p->data.mgrade);
        p->data.mgrade=numberinput("数学 成绩[0-100]:");
        printf("英语 成绩:%d,",p->data.egrade);
        p->data.egrade=numberinput("英语 成绩[0-100]:");
        printf("语文 成绩:%d,",p->data.yuw);
        p->data.yuw=numberinput("语文 成绩[0-100]:");
        p->data.total=p->data.egrade+p->data.cgrade+p->data.mgrade+p->data.yuw;
        p->data.ave=(float)(p->data.total/4);
        p->data.mingci=0;
        printf("\n=====>修改成功!\n");
        Disp(l);
        saveflag=1;
    }
    else
        Nofind();
    getchar();
}



/*插入记录:按学号查询到要插入的节点的位置，然后在该学号之后插入一个新节点。*/
void Insert(Link l)
{
    Link p,v,newinfo; /*p指向插入位置，newinfo指新插入记录*/
    char ch,num[10],s[10];  /*s[]保存插入点位置之前的学号,num[]保存输入的新记录的学号*/
    int flag=0;
    v=l->next;
    Disp(l);
    while(1)
    {
        stringinput(s,10,"输入要插入在哪个学号之后:");
        flag=0;v=l->next;
        while(v) /*查询该学号是否存在，flag=1表示该学号存在*/
        {
            if(strcmp(v->data.num,s)==0)  {flag=1;break;}
            v=v->next;
        }
        if(flag==1)
            break; /*若学号存在，则进行插入之前的新记录的输入操作*/
        else
        {
            getchar();
            printf("\n=====>%s 不存在，重新输入?(y/n):",s);
            scanf("%c",&ch);
            if(ch=='y'||ch=='Y')
            {continue;}
            else
            {return;}
        }
    }
    /*以下新记录的输入操作与Add()相同*/
    stringinput(num,10,"输入新同学学号:");
    v=l->next;
    while(v)
    {
        if(strcmp(v->data.num,num)==0)
        {
            printf("=====>S对不起，'%s' 已经存在!\n",num);
            printheader();
            printdata(v);
            printf("\n");
            getchar();
            return;
        }
        v=v->next;
    }
    newinfo=(Node *)malloc(sizeof(Node));
    if(!newinfo)
    {
        printf("\n 申请失败 "); /*如没有申请到，打印提示信息*/
        return ;             /*返回主界面*/
    }
    strcpy(newinfo->data.num,num);
    stringinput(newinfo->data.name,15,"名字:");
    newinfo->data.cgrade=numberinput("C语言 成绩[0-100]:");
    newinfo->data.mgrade=numberinput("数学 成绩[0-100]:");
    newinfo->data.egrade=numberinput("英语 成绩[0-100]:");
    newinfo->data.yuw=numberinput("语文 成绩[0-100]:");
    newinfo->data.total=newinfo->data.egrade+newinfo->data.cgrade+newinfo->data.mgrade+newinfo->data.yuw;
    newinfo->data.ave=(float)(newinfo->data.total/4);
    newinfo->data.mingci=0;
    newinfo->next=NULL;
    saveflag=1; /*在main()有对该全局变量的判断，若为1,则进行存盘操作*/
    /*将指针赋值给p,因为l中的头节点的下一个节点才实际保存着学生的记录*/
    p=l->next;
    while(1)
    {
        if(strcmp(p->data.num,s)==0) /*在链表中插入一个节点*/
        {
            newinfo->next=p->next;
            p->next=newinfo;
            break;
        }
        p=p->next;
    }
    Disp(l);
    printf("\n\n");
    getchar();
}


/*统计该班的总分第一名和单科第一,和各科不及格人数*/
void Tongji(Link l)
{
    Node *pm,*pe,*pc,*pt,*pk,*p1,*p2,*p3,*p4; /*用于指向分数最高的节点*/
    Node *r=l->next;
    int countc=0,countm=0,counte=0,countk=0; /*保存四门成绩中不及格的人数*/
    if(!r)
    {
        printf("\n=====>没有学生成绩!\n");
        getchar();
        return ;
    }
    Disp(l);
    pm=pe=pc=pt=pk=p1=p2=p3=p4=r;
    while(r)
    {
        if(r->data.cgrade<60) { countc++;p1=r; printf("姓名:%s  C 成绩:%d   不及格\n",p1->data.name,p1->data.cgrade);}
        if(r->data.mgrade<60) {countm++;p2=r; printf("姓名:%s  数学 成绩:%d   不及格\n",p2->data.name,p2->data.mgrade);}
        if(r->data.egrade<60) {counte++;p3=r; printf("姓名:%s  英语 成绩:%d   不及格\n",p3->data.name,p3->data.egrade);}
        if(r->data.yuw<60)  {countk++;p4=r; printf("姓名:%s  语文 成绩:%d   不及格\n",p4->data.name,p4->data.yuw);}
        if(r->data.cgrade>=pc->data.cgrade)    pc=r;
        if(r->data.mgrade>=pm->data.mgrade)    pm=r;
        if(r->data.egrade>=pe->data.egrade)    pe=r;
        if(r->data.yuw>=pk->data.yuw)		pk=r;
        if(r->data.total>=pt->data.total)      pt=r;
        r=r->next;
    }
    printf("\n＊＊＊＊＊＊＊＊＊＊＊统计结果＊＊＊＊＊＊＊＊＊＊\n");
    printf("C语言     <60:%d (ren),\n",countc);
    printf("数学      <60:%d (ren)\n",countm);
    printf("英语   <60:%d (ren)\n",counte);
    printf("语文     <60:%d (ren)\n",countk);
    printf("＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊\n");
    printf("总分最高:%s 总分:%d\n",pt->data.name,pt->data.total);
    printf("英语最高分:%s 分数:%d\n",pe->data.name,pe->data.egrade);
    printf("数学最高分:%s 分数:%d\n",pm->data.name,pm->data.mgrade);
    printf("C语言最高分:%s 分数:%d\n",pc->data.name,pc->data.cgrade);
    printf("语文最高分:%s 分数:%d\n",pk->data.name,pk->data.yuw);
    printf("\n 按任意键返回");
    getchar();
}


/*利用插入排序法实现单链表的按总分字段的降序排序，从高到低*/
void Sort(Link l)
{
    Link ll;
    Node *p,*rr,*s;
    int i=0;
    if(l->next==NULL)
    {
        printf("\n=====>无学生成绩!\n");
        getchar();
        return ;
    }
    ll=(Node*)malloc(sizeof(Node)); /*用于创建新的节点*/
    if(!ll)
    {
        printf("\n 申请失败 "); /*如没有申请到，打印提示信息*/
        return ;             /*返回主界面*/
    }
    ll->next=NULL;
    Disp(l);  /*显示排序前的所有学生记录*/
    p=l->next;
    while(p) /*p!=NULL*/
    {
        s=(Node*)malloc(sizeof(Node)); /*新建节点用于保存从原链表中取出的节点信息*/
        if(!s) /*s==NULL*/
        {
            printf("\n 申请失败 "); /*如没有申请到，打印提示信息*/
            return ;             /*返回主界面*/
        }
        s->data=p->data; /*填数据域*/
        s->next=NULL;    /*指针域为空*/
        rr=ll;
        while(rr->next!=NULL && rr->next->data.total>=p->data.total)
        {
            rr=rr->next;
        } /*指针移至总分比p所指的节点的总分小的节点位置*/
        if(rr->next==NULL)/*若新链表ll中的所有节点的总分值都比p->data.total大时，就将p所指节点加入链表尾部*/
            rr->next=s;
        else /*否则将该节点插入至第一个总分字段比它小的节点的前面*/
        {
            s->next=rr->next;
            rr->next=s;
        }
        p=p->next; /*原链表中的指针下移一个节点*/
    }
    l->next=ll->next; /*ll中存储是的已排序的链表的头指针*/
    p=l->next;           /*已排好序的头指针赋给p，准备填写名次*/
    while(p!=NULL)  /*当p不为空时，进行下列操作*/
    {
        i++;       /*结点序号*/
        p->data.mingci=i;   /*将名次赋值*/
        p=p->next;   /*指针后移*/
    }
    Disp(l);
    saveflag=1;
    printf("\n    =====>完成分类!\n");
}


int main()
{
    
    Link l;      /*定义链表*/
    FILE *fp;    /*文件指针*/
    int select;     /*保存选择结果变量*/
    char ch;     /*保存(y,Y,n,N)*/
    int count=0; /*保存文件中的记录条数（或结点个数）*/
    Node *p,*r;   /*定义记录指针变量*/
    l=(Node*)malloc(sizeof(Node));
    if(!l)
    {
        printf("\n allocate memory failure "); /*如没有申请到，打印提示信息*/
        return 0;             /*返回主界面*/
    }
    l->next=NULL;
    r=l;
    fp=fopen("C:\\student","ab+"); /*以追加方式打开一个二进制文件，可读可写，若此文件不存在，会创建此文件*/
    if(fp==NULL)
    {
        printf("\n=====>can not open file!\n");
        exit(0);
    }
    while(!feof(fp))
    {
        p=(Node*)malloc(sizeof(Node));
        if(!p)
        {
            printf(" memory malloc failure!\n");    /*没有申请成功*/
            exit(0);       /*退出*/
        }
        if(fread(p,sizeof(Node),1,fp)==1) /*一次从文件中读取一条学生成绩记录*/
        {
            p->next=NULL;
            r->next=p;
            r=p;                            /*r指针向后移一个位置*/
            count++;
        }
    }
    fclose(fp); /*关闭文件*/
    printf("\n=====>open file sucess,the total records number is : %d.\n",count);
    while(1)
    {
        menu();
        p=r;
        printf("\n输入你的选择(0~9):");    /*显示提示信息*/
        scanf("%d",&select);
        if(select==0)
        {
            if(saveflag==1) /*若对链表的数据有修改且未进行存盘操作，则此标志为1*/
            {
                getchar();
                printf("\n=====>Whether save the modified record to file?(y/n):");
                scanf("%c",&ch);
                if(ch=='y'||ch=='Y')
                    printf("=====>感谢你的使用!");
                getchar();
                break;
            }
        }
        
        switch(select)
        {
            case 1:Add(l);break;            /*增加学生记录*/
            case 2:Del(l);break;           /*删除学生记录*/
            case 3:Qur(l);break;           /*查询学生记录*/
            case 4:Modify(l);break;        /*修改学生记录*/
            case 5:Insert(l);break;        /*插入学生记录*/
            case 6:Tongji(l);break;       /*统计学生记录*/
            case 7:Sort(l);        /*排序学生记录*/
                Disp(l);break;
            default: Wrong();getchar();break;        /*按键有误，必须为数值0-9*/
        }
    }
}
